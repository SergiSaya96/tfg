// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "dynamixel_motor_cfg_file.hxx"

// alarm_t
// 

alarm_t::
alarm_t (value v)
: ::xml_schema::string (_xsd_alarm_t_literals_[v])
{
}

alarm_t::
alarm_t (const char* v)
: ::xml_schema::string (v)
{
}

alarm_t::
alarm_t (const ::std::string& v)
: ::xml_schema::string (v)
{
}

alarm_t::
alarm_t (const ::xml_schema::string& v)
: ::xml_schema::string (v)
{
}

alarm_t::
alarm_t (const alarm_t& v,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::string (v, f, c)
{
}

alarm_t& alarm_t::
operator= (value v)
{
  static_cast< ::xml_schema::string& > (*this) = 
  ::xml_schema::string (_xsd_alarm_t_literals_[v]);

  return *this;
}


// dynamixel_motor_config_t
// 

const dynamixel_motor_config_t::alarm_shtdwn_type& dynamixel_motor_config_t::
alarm_shtdwn () const
{
  return this->alarm_shtdwn_.get ();
}

dynamixel_motor_config_t::alarm_shtdwn_type& dynamixel_motor_config_t::
alarm_shtdwn ()
{
  return this->alarm_shtdwn_.get ();
}

void dynamixel_motor_config_t::
alarm_shtdwn (const alarm_shtdwn_type& x)
{
  this->alarm_shtdwn_.set (x);
}

const dynamixel_motor_config_t::max_angle_type& dynamixel_motor_config_t::
max_angle () const
{
  return this->max_angle_.get ();
}

dynamixel_motor_config_t::max_angle_type& dynamixel_motor_config_t::
max_angle ()
{
  return this->max_angle_.get ();
}

void dynamixel_motor_config_t::
max_angle (const max_angle_type& x)
{
  this->max_angle_.set (x);
}

const dynamixel_motor_config_t::min_angle_type& dynamixel_motor_config_t::
min_angle () const
{
  return this->min_angle_.get ();
}

dynamixel_motor_config_t::min_angle_type& dynamixel_motor_config_t::
min_angle ()
{
  return this->min_angle_.get ();
}

void dynamixel_motor_config_t::
min_angle (const min_angle_type& x)
{
  this->min_angle_.set (x);
}

const dynamixel_motor_config_t::temp_limit_type& dynamixel_motor_config_t::
temp_limit () const
{
  return this->temp_limit_.get ();
}

dynamixel_motor_config_t::temp_limit_type& dynamixel_motor_config_t::
temp_limit ()
{
  return this->temp_limit_.get ();
}

void dynamixel_motor_config_t::
temp_limit (const temp_limit_type& x)
{
  this->temp_limit_.set (x);
}

const dynamixel_motor_config_t::max_voltage_type& dynamixel_motor_config_t::
max_voltage () const
{
  return this->max_voltage_.get ();
}

dynamixel_motor_config_t::max_voltage_type& dynamixel_motor_config_t::
max_voltage ()
{
  return this->max_voltage_.get ();
}

void dynamixel_motor_config_t::
max_voltage (const max_voltage_type& x)
{
  this->max_voltage_.set (x);
}

const dynamixel_motor_config_t::min_voltage_type& dynamixel_motor_config_t::
min_voltage () const
{
  return this->min_voltage_.get ();
}

dynamixel_motor_config_t::min_voltage_type& dynamixel_motor_config_t::
min_voltage ()
{
  return this->min_voltage_.get ();
}

void dynamixel_motor_config_t::
min_voltage (const min_voltage_type& x)
{
  this->min_voltage_.set (x);
}

const dynamixel_motor_config_t::max_torque_type& dynamixel_motor_config_t::
max_torque () const
{
  return this->max_torque_.get ();
}

dynamixel_motor_config_t::max_torque_type& dynamixel_motor_config_t::
max_torque ()
{
  return this->max_torque_.get ();
}

void dynamixel_motor_config_t::
max_torque (const max_torque_type& x)
{
  this->max_torque_.set (x);
}

const dynamixel_motor_config_t::cw_comp_margin_type& dynamixel_motor_config_t::
cw_comp_margin () const
{
  return this->cw_comp_margin_.get ();
}

dynamixel_motor_config_t::cw_comp_margin_type& dynamixel_motor_config_t::
cw_comp_margin ()
{
  return this->cw_comp_margin_.get ();
}

void dynamixel_motor_config_t::
cw_comp_margin (const cw_comp_margin_type& x)
{
  this->cw_comp_margin_.set (x);
}

const dynamixel_motor_config_t::ccw_comp_margin_type& dynamixel_motor_config_t::
ccw_comp_margin () const
{
  return this->ccw_comp_margin_.get ();
}

dynamixel_motor_config_t::ccw_comp_margin_type& dynamixel_motor_config_t::
ccw_comp_margin ()
{
  return this->ccw_comp_margin_.get ();
}

void dynamixel_motor_config_t::
ccw_comp_margin (const ccw_comp_margin_type& x)
{
  this->ccw_comp_margin_.set (x);
}

const dynamixel_motor_config_t::cw_comp_slope_type& dynamixel_motor_config_t::
cw_comp_slope () const
{
  return this->cw_comp_slope_.get ();
}

dynamixel_motor_config_t::cw_comp_slope_type& dynamixel_motor_config_t::
cw_comp_slope ()
{
  return this->cw_comp_slope_.get ();
}

void dynamixel_motor_config_t::
cw_comp_slope (const cw_comp_slope_type& x)
{
  this->cw_comp_slope_.set (x);
}

const dynamixel_motor_config_t::ccw_comp_slope_type& dynamixel_motor_config_t::
ccw_comp_slope () const
{
  return this->ccw_comp_slope_.get ();
}

dynamixel_motor_config_t::ccw_comp_slope_type& dynamixel_motor_config_t::
ccw_comp_slope ()
{
  return this->ccw_comp_slope_.get ();
}

void dynamixel_motor_config_t::
ccw_comp_slope (const ccw_comp_slope_type& x)
{
  this->ccw_comp_slope_.set (x);
}

const dynamixel_motor_config_t::punch_type& dynamixel_motor_config_t::
punch () const
{
  return this->punch_.get ();
}

dynamixel_motor_config_t::punch_type& dynamixel_motor_config_t::
punch ()
{
  return this->punch_.get ();
}

void dynamixel_motor_config_t::
punch (const punch_type& x)
{
  this->punch_.set (x);
}

const dynamixel_motor_config_t::kp_type& dynamixel_motor_config_t::
kp () const
{
  return this->kp_.get ();
}

dynamixel_motor_config_t::kp_type& dynamixel_motor_config_t::
kp ()
{
  return this->kp_.get ();
}

void dynamixel_motor_config_t::
kp (const kp_type& x)
{
  this->kp_.set (x);
}

const dynamixel_motor_config_t::ki_type& dynamixel_motor_config_t::
ki () const
{
  return this->ki_.get ();
}

dynamixel_motor_config_t::ki_type& dynamixel_motor_config_t::
ki ()
{
  return this->ki_.get ();
}

void dynamixel_motor_config_t::
ki (const ki_type& x)
{
  this->ki_.set (x);
}

const dynamixel_motor_config_t::kd_type& dynamixel_motor_config_t::
kd () const
{
  return this->kd_.get ();
}

dynamixel_motor_config_t::kd_type& dynamixel_motor_config_t::
kd ()
{
  return this->kd_.get ();
}

void dynamixel_motor_config_t::
kd (const kd_type& x)
{
  this->kd_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// alarm_t
//

alarm_t::
alarm_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::string (e, f, c)
{
  _xsd_alarm_t_convert ();
}

alarm_t::
alarm_t (const ::xercesc::DOMAttr& a,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::string (a, f, c)
{
  _xsd_alarm_t_convert ();
}

alarm_t::
alarm_t (const ::std::string& s,
         const ::xercesc::DOMElement* e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
: ::xml_schema::string (s, e, f, c)
{
  _xsd_alarm_t_convert ();
}

alarm_t* alarm_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class alarm_t (*this, f, c);
}

alarm_t::value alarm_t::
_xsd_alarm_t_convert () const
{
  ::xsd::cxx::tree::enum_comparator< char > c (_xsd_alarm_t_literals_);
  const value* i (::std::lower_bound (
                    _xsd_alarm_t_indexes_,
                    _xsd_alarm_t_indexes_ + 7,
                    *this,
                    c));

  if (i == _xsd_alarm_t_indexes_ + 7 || _xsd_alarm_t_literals_[*i] != *this)
  {
    throw ::xsd::cxx::tree::unexpected_enumerator < char > (*this);
  }

  return *i;
}

const char* const alarm_t::
_xsd_alarm_t_literals_[7] =
{
  "instruction_error",
  "overload_error",
  "checksum_error",
  "range_error",
  "overheating_error",
  "angle_limit_error",
  "input_voltage_error"
};

const alarm_t::value alarm_t::
_xsd_alarm_t_indexes_[7] =
{
  ::alarm_t::angle_limit_error,
  ::alarm_t::checksum_error,
  ::alarm_t::input_voltage_error,
  ::alarm_t::instruction_error,
  ::alarm_t::overheating_error,
  ::alarm_t::overload_error,
  ::alarm_t::range_error
};

// dynamixel_motor_config_t
//

dynamixel_motor_config_t::
dynamixel_motor_config_t (const alarm_shtdwn_type& alarm_shtdwn,
                          const max_angle_type& max_angle,
                          const min_angle_type& min_angle,
                          const temp_limit_type& temp_limit,
                          const max_voltage_type& max_voltage,
                          const min_voltage_type& min_voltage,
                          const max_torque_type& max_torque,
                          const cw_comp_margin_type& cw_comp_margin,
                          const ccw_comp_margin_type& ccw_comp_margin,
                          const cw_comp_slope_type& cw_comp_slope,
                          const ccw_comp_slope_type& ccw_comp_slope,
                          const punch_type& punch,
                          const kp_type& kp,
                          const ki_type& ki,
                          const kd_type& kd)
: ::xml_schema::type (),
  alarm_shtdwn_ (alarm_shtdwn, this),
  max_angle_ (max_angle, this),
  min_angle_ (min_angle, this),
  temp_limit_ (temp_limit, this),
  max_voltage_ (max_voltage, this),
  min_voltage_ (min_voltage, this),
  max_torque_ (max_torque, this),
  cw_comp_margin_ (cw_comp_margin, this),
  ccw_comp_margin_ (ccw_comp_margin, this),
  cw_comp_slope_ (cw_comp_slope, this),
  ccw_comp_slope_ (ccw_comp_slope, this),
  punch_ (punch, this),
  kp_ (kp, this),
  ki_ (ki, this),
  kd_ (kd, this)
{
}

dynamixel_motor_config_t::
dynamixel_motor_config_t (const dynamixel_motor_config_t& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  alarm_shtdwn_ (x.alarm_shtdwn_, f, this),
  max_angle_ (x.max_angle_, f, this),
  min_angle_ (x.min_angle_, f, this),
  temp_limit_ (x.temp_limit_, f, this),
  max_voltage_ (x.max_voltage_, f, this),
  min_voltage_ (x.min_voltage_, f, this),
  max_torque_ (x.max_torque_, f, this),
  cw_comp_margin_ (x.cw_comp_margin_, f, this),
  ccw_comp_margin_ (x.ccw_comp_margin_, f, this),
  cw_comp_slope_ (x.cw_comp_slope_, f, this),
  ccw_comp_slope_ (x.ccw_comp_slope_, f, this),
  punch_ (x.punch_, f, this),
  kp_ (x.kp_, f, this),
  ki_ (x.ki_, f, this),
  kd_ (x.kd_, f, this)
{
}

dynamixel_motor_config_t::
dynamixel_motor_config_t (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  alarm_shtdwn_ (this),
  max_angle_ (this),
  min_angle_ (this),
  temp_limit_ (this),
  max_voltage_ (this),
  min_voltage_ (this),
  max_torque_ (this),
  cw_comp_margin_ (this),
  ccw_comp_margin_ (this),
  cw_comp_slope_ (this),
  ccw_comp_slope_ (this),
  punch_ (this),
  kp_ (this),
  ki_ (this),
  kd_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void dynamixel_motor_config_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // alarm_shtdwn
    //
    if (n.name () == "alarm_shtdwn" && n.namespace_ ().empty ())
    {
      if (!alarm_shtdwn_.present ())
      {
        this->alarm_shtdwn_.set (alarm_shtdwn_traits::create (i, f, this));
        continue;
      }
    }

    // max_angle
    //
    if (n.name () == "max_angle" && n.namespace_ ().empty ())
    {
      if (!max_angle_.present ())
      {
        this->max_angle_.set (max_angle_traits::create (i, f, this));
        continue;
      }
    }

    // min_angle
    //
    if (n.name () == "min_angle" && n.namespace_ ().empty ())
    {
      if (!min_angle_.present ())
      {
        this->min_angle_.set (min_angle_traits::create (i, f, this));
        continue;
      }
    }

    // temp_limit
    //
    if (n.name () == "temp_limit" && n.namespace_ ().empty ())
    {
      if (!temp_limit_.present ())
      {
        this->temp_limit_.set (temp_limit_traits::create (i, f, this));
        continue;
      }
    }

    // max_voltage
    //
    if (n.name () == "max_voltage" && n.namespace_ ().empty ())
    {
      if (!max_voltage_.present ())
      {
        this->max_voltage_.set (max_voltage_traits::create (i, f, this));
        continue;
      }
    }

    // min_voltage
    //
    if (n.name () == "min_voltage" && n.namespace_ ().empty ())
    {
      if (!min_voltage_.present ())
      {
        this->min_voltage_.set (min_voltage_traits::create (i, f, this));
        continue;
      }
    }

    // max_torque
    //
    if (n.name () == "max_torque" && n.namespace_ ().empty ())
    {
      if (!max_torque_.present ())
      {
        this->max_torque_.set (max_torque_traits::create (i, f, this));
        continue;
      }
    }

    // cw_comp_margin
    //
    if (n.name () == "cw_comp_margin" && n.namespace_ ().empty ())
    {
      if (!cw_comp_margin_.present ())
      {
        this->cw_comp_margin_.set (cw_comp_margin_traits::create (i, f, this));
        continue;
      }
    }

    // ccw_comp_margin
    //
    if (n.name () == "ccw_comp_margin" && n.namespace_ ().empty ())
    {
      if (!ccw_comp_margin_.present ())
      {
        this->ccw_comp_margin_.set (ccw_comp_margin_traits::create (i, f, this));
        continue;
      }
    }

    // cw_comp_slope
    //
    if (n.name () == "cw_comp_slope" && n.namespace_ ().empty ())
    {
      if (!cw_comp_slope_.present ())
      {
        this->cw_comp_slope_.set (cw_comp_slope_traits::create (i, f, this));
        continue;
      }
    }

    // ccw_comp_slope
    //
    if (n.name () == "ccw_comp_slope" && n.namespace_ ().empty ())
    {
      if (!ccw_comp_slope_.present ())
      {
        this->ccw_comp_slope_.set (ccw_comp_slope_traits::create (i, f, this));
        continue;
      }
    }

    // punch
    //
    if (n.name () == "punch" && n.namespace_ ().empty ())
    {
      if (!punch_.present ())
      {
        this->punch_.set (punch_traits::create (i, f, this));
        continue;
      }
    }

    // kp
    //
    if (n.name () == "kp" && n.namespace_ ().empty ())
    {
      if (!kp_.present ())
      {
        this->kp_.set (kp_traits::create (i, f, this));
        continue;
      }
    }

    // ki
    //
    if (n.name () == "ki" && n.namespace_ ().empty ())
    {
      if (!ki_.present ())
      {
        this->ki_.set (ki_traits::create (i, f, this));
        continue;
      }
    }

    // kd
    //
    if (n.name () == "kd" && n.namespace_ ().empty ())
    {
      if (!kd_.present ())
      {
        this->kd_.set (kd_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!alarm_shtdwn_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "alarm_shtdwn",
      "");
  }

  if (!max_angle_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "max_angle",
      "");
  }

  if (!min_angle_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "min_angle",
      "");
  }

  if (!temp_limit_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "temp_limit",
      "");
  }

  if (!max_voltage_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "max_voltage",
      "");
  }

  if (!min_voltage_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "min_voltage",
      "");
  }

  if (!max_torque_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "max_torque",
      "");
  }

  if (!cw_comp_margin_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cw_comp_margin",
      "");
  }

  if (!ccw_comp_margin_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ccw_comp_margin",
      "");
  }

  if (!cw_comp_slope_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "cw_comp_slope",
      "");
  }

  if (!ccw_comp_slope_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ccw_comp_slope",
      "");
  }

  if (!punch_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "punch",
      "");
  }

  if (!kp_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "kp",
      "");
  }

  if (!ki_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ki",
      "");
  }

  if (!kd_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "kd",
      "");
  }
}

dynamixel_motor_config_t* dynamixel_motor_config_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class dynamixel_motor_config_t (*this, f, c);
}

dynamixel_motor_config_t& dynamixel_motor_config_t::
operator= (const dynamixel_motor_config_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->alarm_shtdwn_ = x.alarm_shtdwn_;
    this->max_angle_ = x.max_angle_;
    this->min_angle_ = x.min_angle_;
    this->temp_limit_ = x.temp_limit_;
    this->max_voltage_ = x.max_voltage_;
    this->min_voltage_ = x.min_voltage_;
    this->max_torque_ = x.max_torque_;
    this->cw_comp_margin_ = x.cw_comp_margin_;
    this->ccw_comp_margin_ = x.ccw_comp_margin_;
    this->cw_comp_slope_ = x.cw_comp_slope_;
    this->ccw_comp_slope_ = x.ccw_comp_slope_;
    this->punch_ = x.punch_;
    this->kp_ = x.kp_;
    this->ki_ = x.ki_;
    this->kd_ = x.kd_;
  }

  return *this;
}

dynamixel_motor_config_t::
~dynamixel_motor_config_t ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::dynamixel_motor_config_t > (
    ::dynamixel_motor_config (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::dynamixel_motor_config_t > (
    ::dynamixel_motor_config (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::dynamixel_motor_config_t > (
    ::dynamixel_motor_config (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::dynamixel_motor_config (isrc, f, p);
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::dynamixel_motor_config (isrc, h, f, p);
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::dynamixel_motor_config (isrc, h, f, p);
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::dynamixel_motor_config (isrc, f, p);
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::dynamixel_motor_config (isrc, h, f, p);
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::dynamixel_motor_config (isrc, h, f, p);
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::dynamixel_motor_config_t > (
    ::dynamixel_motor_config (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::dynamixel_motor_config_t > (
    ::dynamixel_motor_config (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::dynamixel_motor_config_t > (
    ::dynamixel_motor_config (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::dynamixel_motor_config_t > (
      ::dynamixel_motor_config (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "dynamixel_motor_config" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::dynamixel_motor_config_t > r (
      ::xsd::cxx::tree::traits< ::dynamixel_motor_config_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "dynamixel_motor_config",
    "");
}

::std::auto_ptr< ::dynamixel_motor_config_t >
dynamixel_motor_config (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "dynamixel_motor_config" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::dynamixel_motor_config_t > r (
      ::xsd::cxx::tree::traits< ::dynamixel_motor_config_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "dynamixel_motor_config",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const alarm_t& i)
{
  e << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const alarm_t& i)
{
  a << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const alarm_t& i)
{
  l << static_cast< const ::xml_schema::string& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const dynamixel_motor_config_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // alarm_shtdwn
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "alarm_shtdwn",
        e));

    s << i.alarm_shtdwn ();
  }

  // max_angle
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "max_angle",
        e));

    s << i.max_angle ();
  }

  // min_angle
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "min_angle",
        e));

    s << i.min_angle ();
  }

  // temp_limit
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "temp_limit",
        e));

    s << i.temp_limit ();
  }

  // max_voltage
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "max_voltage",
        e));

    s << i.max_voltage ();
  }

  // min_voltage
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "min_voltage",
        e));

    s << i.min_voltage ();
  }

  // max_torque
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "max_torque",
        e));

    s << i.max_torque ();
  }

  // cw_comp_margin
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cw_comp_margin",
        e));

    s << i.cw_comp_margin ();
  }

  // ccw_comp_margin
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ccw_comp_margin",
        e));

    s << i.ccw_comp_margin ();
  }

  // cw_comp_slope
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "cw_comp_slope",
        e));

    s << i.cw_comp_slope ();
  }

  // ccw_comp_slope
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ccw_comp_slope",
        e));

    s << i.ccw_comp_slope ();
  }

  // punch
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "punch",
        e));

    s << i.punch ();
  }

  // kp
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "kp",
        e));

    s << i.kp ();
  }

  // ki
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ki",
        e));

    s << i.ki ();
  }

  // kd
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "kd",
        e));

    s << i.kd ();
  }
}

void
dynamixel_motor_config (::std::ostream& o,
                        const ::dynamixel_motor_config_t& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::dynamixel_motor_config (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
dynamixel_motor_config (::std::ostream& o,
                        const ::dynamixel_motor_config_t& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::dynamixel_motor_config (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
dynamixel_motor_config (::std::ostream& o,
                        const ::dynamixel_motor_config_t& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::dynamixel_motor_config (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
dynamixel_motor_config (::xercesc::XMLFormatTarget& t,
                        const ::dynamixel_motor_config_t& s,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::dynamixel_motor_config (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
dynamixel_motor_config (::xercesc::XMLFormatTarget& t,
                        const ::dynamixel_motor_config_t& s,
                        ::xml_schema::error_handler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::dynamixel_motor_config (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
dynamixel_motor_config (::xercesc::XMLFormatTarget& t,
                        const ::dynamixel_motor_config_t& s,
                        ::xercesc::DOMErrorHandler& h,
                        const ::xml_schema::namespace_infomap& m,
                        const ::std::string& e,
                        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::dynamixel_motor_config (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
dynamixel_motor_config (::xercesc::DOMDocument& d,
                        const ::dynamixel_motor_config_t& s,
                        ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "dynamixel_motor_config" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "dynamixel_motor_config",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
dynamixel_motor_config (const ::dynamixel_motor_config_t& s,
                        const ::xml_schema::namespace_infomap& m,
                        ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "dynamixel_motor_config",
      "",
      m, f));

  ::dynamixel_motor_config (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

